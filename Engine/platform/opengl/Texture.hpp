#pragma once

#include <GL/gl.h>

namespace eng {
    /**
     * @enum TextureWrap
     * @brief Specifies texture wrapping modes for OpenGL textures.
     * 
     * These modes define how textures behave when texture coordinates exceed the range [0, 1].
     */
    enum TextureWrap {
        Repeat = GL_REPEAT,             ///< Repeats the texture when out of bounds.
        ClampToEdge = GL_CLAMP_TO_EDGE, ///< Clamps texture coordinates to the edges of the texture.
        MirroredRepeat = GL_MIRRORED_REPEAT ///< Mirrors the texture when out of bounds.
    };

    /**
     * @enum TextureFilter
     * @brief Specifies filtering options for texture scaling.
     * 
     * These modes control how textures are sampled when scaled up or down.
     */
    enum TextureFilter {
        Nearest = GL_NEAREST,                          ///< Selects the nearest texel without interpolation.
        Linear = GL_LINEAR,                            ///< Performs linear interpolation between texels.
        MipMapNearest = GL_NEAREST_MIPMAP_NEAREST,     ///< Nearest sampling for mipmaps.
        MipMapLinear = GL_LINEAR_MIPMAP_LINEAR         ///< Linear sampling between mipmap levels.
    };

    /**
     * @struct TextureSpec
     * @brief Specifies texture parameters for wrapping and filtering.
     * 
     * This struct allows users to define how a texture behaves when rendered. It includes
     * options for horizontal and vertical wrapping, as well as minification and magnification filters.
     */
    struct TextureSpec {
        TextureWrap horizontalWrap = Repeat; ///< Wrapping mode for the horizontal (S-axis) texture coordinates.
        TextureWrap verticalWrap = Repeat;   ///< Wrapping mode for the vertical (T-axis) texture coordinates.
        TextureFilter minFilter = MipMapLinear; ///< Minification filter for scaling down the texture.
        TextureFilter magFilter = Linear;       ///< Magnification filter for scaling up the texture.
    };

    /**
     * @class Texture
     * @brief A class for loading, binding, and managing 2D textures in OpenGL.
     * 
     * This class is responsible for loading texture data from a file, creating
     * an OpenGL texture object, and setting texture parameters such as wrapping and filtering.
     * The texture can then be bound for rendering.
     */
    class Texture {
    private:
        /**
         * @brief OpenGL texture ID.
         * 
         * This unique identifier is generated by OpenGL and used to reference the texture.
         */
        unsigned int id;

    public:
        /**
         * @brief Constructs a Texture object and loads a texture from a file.
         * 
         * This constructor loads texture data from the specified file and creates an OpenGL texture 
         * object using the parameters defined in the TextureSpec structure.
         * 
         * @param source The file path to the texture image (e.g., PNG or JPEG file).
         * @param spec A TextureSpec structure defining wrapping and filtering parameters.
         * @note If the texture fails to load, the texture object will not be initialized.
         */
        explicit Texture(const char* source, const TextureSpec& spec);

        /**
         * @brief Destructor that frees the texture resource.
         * 
         * Automatically deletes the OpenGL texture object to prevent memory leaks.
         */
        ~Texture();

        /**
         * @brief Binds the texture to the current OpenGL texture unit.
         * 
         * This method makes the texture active for rendering operations. 
         * By default, it binds to `GL_TEXTURE0`.
         */
        void bind() const;
    };

} // namespace eng
